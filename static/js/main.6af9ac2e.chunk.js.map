{"version":3,"sources":["App.js","bluetooth.js","serviceWorker.js","index.js"],"names":["Values","values","App","metrics","useState","setValues","primaryService","setPrimaryService","location","setLocation","fetchMetrics","service","vals","uuid","getCharacteristic","then","char","startNotifications","addEventListener","value","name","target","Object","assign","getUint8","navigator","geolocation","watchPosition","pos","lat","coords","latitude","lng","longitude","acc","accuracy","useEffect","timeout","setTimeout","clearTimeout","now","Date","interval","setInterval","body","toISOString","fetch","method","headers","JSON","stringify","clearInterval","className","onClick","Promise","resolve","reject","bluetooth","requestDevice","acceptAllDevices","optionalServices","device","gatt","connect","server","getPrimaryService","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yQAsBA,SAASA,EAAT,GAA2B,IAAVC,EAAS,EAATA,OACf,OACE,6BACGA,EAAO,UACR,6BACE,yCACA,2BAAIA,EAAO,WAGZA,EAAO,UACR,6BACE,yCACA,2BAAIA,EAAO,WAGZA,EAAM,MACP,6BACE,wCACA,2BAAIA,EAAM,QAqGHC,MA9Ff,WACE,IAAMC,EAAU,CACd,uCAAwC,QACxC,uCAAwC,QACxC,uCAAwC,QAJ7B,EAOeC,oBAAS,GAPxB,mBAONH,EAPM,KAOEI,EAPF,OAQ+BD,oBAAS,GARxC,mBAQNE,EARM,KAQUC,EARV,OASmBH,oBAAS,GAT5B,mBASNI,EATM,KASIC,EATJ,KAWPC,EAAe,SAACC,GACpB,IAAIC,EAAO,GACX,IAAK,IAAIC,KAAQV,EACfQ,EAAQG,kBAAkBD,GACvBE,MAAK,SAAAC,GAAI,OAAIA,EAAKC,wBAClBF,MAAK,SAAAC,GAAI,OAAIA,EAAKE,iBAAiB,8BAA8B,SAAAC,GAChE,IAAIC,EAAOjB,EAAQgB,EAAME,OAAOR,MAChCD,EAAOU,OAAOC,OACZX,EADKU,OAAA,IAAAA,CAAA,GAGFF,EAAOD,EAAME,OAAOF,MAAMK,SAAS,KAGxCnB,EAAUO,UAqDlB,OAhDIa,UAAUC,aACZD,UAAUC,YAAYC,eAAc,SAAAC,GAClCnB,EAAY,CAACoB,IAAKD,EAAIE,OAAOC,SAAUC,IAAKJ,EAAIE,OAAOG,UAAWC,IAAKN,EAAIE,OAAOK,cAItFC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACpBhC,GAILI,EAAaJ,KACZ,KAEH,OAAO,kBAAMiC,aAAaF,OAI5BD,qBAAU,WACR,IAAMI,EAAM,IAAIC,KAEhB,IAAe,IAAXxC,EAAJ,CAIA,IAAMyC,EAAWC,aAAY,WAC3B,IAAMC,EAAO,CACXpC,SAAUA,EAASqB,IAAM,KAAOrB,EAASwB,IACzCG,SAAU3B,EAAS0B,IACnB,QAASjC,EAAO,SAChB,QAASA,EAAO,SAChB,KAAQA,EAAM,KACd,UAAauC,EAAIK,eAGnBC,MAAM,2CAA4C,CAChDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBJ,KAAMK,KAAKC,UAAUN,OAEtB,KACH,OAAO,kBAAMO,cAAcT,OAC1B,CAACzC,IAIF,yBAAKmD,UAAU,OACb,4BAAQA,UAAU,eACI,IAAnB9C,EAA2B,0HAA0B,wIACpDA,GAAkB,4BAAQ+C,QAAU,WCzHnC,IAAIC,SAAQ,SAACC,EAASC,GACzB/B,UAAUgC,UAAUC,cAAc,CAC9BC,kBAAkB,EAClBC,iBAAkB,CAAC,0CAEtB7C,MAAK,SAAA8C,GAAM,OAAIA,EAAOC,KAAKC,aAC3BhD,MAAK,SAAAiD,GAAM,OAAIA,EAAOC,kBAAkB,2CACxClD,MAAK,SAAAT,GACFiD,EAAQjD,SDkHqBS,MAAK,SAAAT,GAClCC,EAAkBD,GAClBI,EAAaJ,QAHG,gEAOnBL,GAAU,kBAACD,EAAD,CAAQC,OAAQA,OE3HfiE,QACW,cAA7BC,OAAO3D,SAAS4D,UAEe,UAA7BD,OAAO3D,SAAS4D,UAEhBD,OAAO3D,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBhD,WACrBA,UAAUiD,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6af9ac2e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { createCharacteristicProvider } from './bluetooth';\n\n// function Metric({name, uuid, service}) {\n//   const [value, setValue] = useState(false);\n//\n//   service.getCharacteristic(uuid)\n//     .then(char => char.startNotifications())\n//     .then(char => char.addEventListener('characteristicvaluechanged', value => {\n//       setValue();\n//     }));\n//\n//   return (\n//     <div className=\"metric\">\n//       <dt>{ name }</dt>\n//       <dd>{ value || 'нет данных' }</dd>\n//     </div>\n//   );\n// }\n\n\nfunction Values({values}) {\n  return (\n    <div>\n      {values['pm0.1'] &&\n      <div>\n        <strong>PM0.1</strong>\n        <p>{values['pm0.1']}</p>\n      </div>\n      }\n      {values['pm2.5'] &&\n      <div>\n        <strong>PM2.5</strong>\n        <p>{values['pm2.5']}</p>\n      </div>\n      }\n      {values['pm10'] &&\n      <div>\n        <strong>PM10</strong>\n        <p>{values['pm10']}</p>\n      </div>\n      }\n    </div>\n  );\n}\n\nfunction App() {\n  const metrics = {\n    'cc4f2f18-7b99-4fae-b46d-3568a42cb3f8': 'pm0.1',\n    'd7f6bea5-4e01-458d-9395-9e42ddd00b69': 'pm2.5',\n    '4e79550a-da13-4cc3-905c-2c4426d305be': 'pm10',\n  };\n\n  const [values, setValues] = useState(false);\n  const [primaryService, setPrimaryService] = useState(false);\n  const [location, setLocation] = useState(false);\n\n  const fetchMetrics = (service) => {\n    let vals = {};\n    for (var uuid in metrics) {\n      service.getCharacteristic(uuid)\n        .then(char => char.startNotifications())\n        .then(char => char.addEventListener('characteristicvaluechanged', value => {\n          var name = metrics[value.target.uuid];\n          vals = Object.assign(\n            vals,\n            {\n              [name]: value.target.value.getUint8(0)\n            }\n          );\n          setValues(vals);\n        }))\n    }\n  }\n\n  if (navigator.geolocation) {\n    navigator.geolocation.watchPosition(pos => {\n      setLocation({lat: pos.coords.latitude, lng: pos.coords.longitude, acc: pos.coords.accuracy});\n    });\n  }\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      if (!primaryService) {\n        return;\n      }\n\n      fetchMetrics(primaryService);\n    }, 1000);\n\n    return () => clearTimeout(timeout);\n  });\n\n\n  useEffect(() => {\n    const now = new Date();\n\n    if (values === false) {\n      return;\n    }\n\n    const interval = setInterval(() => {\n      const body = {\n        location: location.lat + ', ' + location.lng,\n        accuracy: location.acc,\n        \"pm0.1\": values['pm0.1'],\n        \"pm2.5\": values['pm2.5'],\n        \"pm10\": values['pm10'],\n        \"createdAt\": now.toISOString()\n      };\n\n      fetch(\"https://pms.kixlive.ru/measurements/_doc\", {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": 'application/json',\n        },\n        body: JSON.stringify(body)\n      })\n    }, 10000);\n    return () => clearInterval(interval);\n  }, [values]);\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {primaryService !== false ? <p>Датчик подключен</p> : <p>Датчик не подключен</p>}\n        {!primaryService && <button onClick= {() => {\n          createCharacteristicProvider().then(primaryService => {\n            setPrimaryService(primaryService);\n            fetchMetrics(primaryService);\n        })}}>\n        Подключить\n        </button>}\n        {values && <Values values={values}/>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// const characteristicMap = {\n//     'cc4f2f18-7b99-4fae-b46d-3568a42cb3f8': 'pm01', // PM0.1\n//     'd7f6bea5-4e01-458d-9395-9e42ddd00b69': 'pm25', // PM2.5\n//     '4e79550a-da13-4cc3-905c-2c4426d305be': 'pm10', // PM10\n// };\n\nexport function createCharacteristicProvider() {\n    return new Promise((resolve, reject) => {\n        navigator.bluetooth.requestDevice({\n            acceptAllDevices: true,\n            optionalServices: ['faf6c799-5567-4f54-89fb-c7188b3f3b88']\n        })\n        .then(device => device.gatt.connect())\n        .then(server => server.getPrimaryService('faf6c799-5567-4f54-89fb-c7188b3f3b88'))\n        .then(primaryService => {\n            resolve(primaryService);\n        });\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}