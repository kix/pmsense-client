{"version":3,"sources":["App.js","bluetooth.js","serviceWorker.js","index.js"],"names":["Metric","name","uuid","service","useState","value","setValue","getCharacteristic","then","char","startNotifications","addEventListener","target","getUint8","className","App","primaryService","setPrimaryService","onClick","Promise","resolve","reject","navigator","bluetooth","requestDevice","acceptAllDevices","optionalServices","device","gatt","connect","server","getPrimaryService","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAIA,SAASA,EAAT,GAAwC,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,QAAU,EACXC,oBAAS,GADE,mBAC9BC,EAD8B,KACvBC,EADuB,KASrC,OANAH,EAAQI,kBAAkBL,GACvBM,MAAK,SAAAC,GAAI,OAAIA,EAAKC,wBAClBF,MAAK,SAAAC,GAAI,OAAIA,EAAKE,iBAAiB,8BAA8B,SAAAN,GAChEC,EAASD,EAAMO,OAAOP,MAAMQ,SAAS,UAIvC,yBAAKC,UAAU,UACb,4BAAMb,GACN,4BAAMI,GAAS,4DA6BNU,MAxBf,WAAgB,IAAD,EAC+BX,oBAAS,GADxC,mBACNY,EADM,KACUC,EADV,KAGb,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,eACI,IAAnBE,EAA2B,0HAA0B,wIACpDA,GAAkB,4BAAQE,QAAU,WCrBnC,IAAIC,SAAQ,SAACC,EAASC,GACzBC,UAAUC,UAAUC,cAAc,CAC9BC,kBAAkB,EAClBC,iBAAkB,CAAC,0CAEtBlB,MAAK,SAAAmB,GAAM,OAAIA,EAAOC,KAAKC,aAC3BrB,MAAK,SAAAsB,GAAM,OAAIA,EAAOC,kBAAkB,2CACxCvB,MAAK,SAAAQ,GACFI,EAAQJ,SDcqBR,MAAK,SAAAQ,GAClCC,EAAkBD,QAFF,iEAOC,IAAnBA,GAA4B,CAC5B,kBAAChB,EAAD,CAAQC,KAAK,QAAQC,KAAK,uCAAuCC,QAASa,IAC1E,kBAAChB,EAAD,CAAQC,KAAK,QAAQC,KAAK,uCAAuCC,QAASa,IAC1E,kBAAChB,EAAD,CAAQC,KAAK,OAAOC,KAAK,uCAAuCC,QAASa,QE1B/DgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBlB,WACrBA,UAAUmB,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e1ca1a01.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { createCharacteristicProvider } from './bluetooth';\n\nfunction Metric({name, uuid, service}) {\n  const [value, setValue] = useState(false);\n\n  service.getCharacteristic(uuid)\n    .then(char => char.startNotifications())\n    .then(char => char.addEventListener('characteristicvaluechanged', value => {\n      setValue(value.target.value.getUint8(0));\n    }));\n\n  return (\n    <div className=\"metric\">\n      <dt>{ name }</dt>\n      <dd>{ value || 'нет данных' }</dd>\n    </div>\n  );\n}\n\nfunction App() {\n  const [primaryService, setPrimaryService] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {primaryService !== false ? <p>Датчик подключен</p> : <p>Датчик не подключен</p>}\n        {!primaryService && <button onClick= {() => {\n          createCharacteristicProvider().then(primaryService => {\n            setPrimaryService(primaryService);\n        })}}>\n        Подключить\n        </button>}\n\n        { primaryService !== false && [\n          <Metric name=\"PM0.1\" uuid='cc4f2f18-7b99-4fae-b46d-3568a42cb3f8' service={primaryService}/>,\n          <Metric name=\"PM2.5\" uuid='d7f6bea5-4e01-458d-9395-9e42ddd00b69' service={primaryService}/>,\n          <Metric name=\"PM10\" uuid='4e79550a-da13-4cc3-905c-2c4426d305be' service={primaryService}/>\n        ]}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// const characteristicMap = {\n//     'cc4f2f18-7b99-4fae-b46d-3568a42cb3f8': 'pm01', // PM0.1\n//     'd7f6bea5-4e01-458d-9395-9e42ddd00b69': 'pm25', // PM2.5\n//     '4e79550a-da13-4cc3-905c-2c4426d305be': 'pm10', // PM10\n// };\n\nexport function createCharacteristicProvider() {\n    return new Promise((resolve, reject) => {\n        navigator.bluetooth.requestDevice({\n            acceptAllDevices: true,\n            optionalServices: ['faf6c799-5567-4f54-89fb-c7188b3f3b88']\n        })\n        .then(device => device.gatt.connect())\n        .then(server => server.getPrimaryService('faf6c799-5567-4f54-89fb-c7188b3f3b88'))\n        .then(primaryService => {\n            resolve(primaryService);\n        });\n    })\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}